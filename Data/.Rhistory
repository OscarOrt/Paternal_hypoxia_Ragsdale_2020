red
plot(rep(1,3),col=red,pch=19,cex=3)
p <- ggplot(ToothGrowth, aes(x=dose, y=len,fill=dose)) +
geom_violin() +
scale_fill_manual(values=red)
p
red <- colfunc(10)[2:4]
red
p <- ggplot(ToothGrowth, aes(x=dose, y=len,fill=dose)) +
geom_violin() +
scale_fill_manual(values=red)
p
p <- ggplot(ToothGrowth, aes(x=dose, y=len,fill=dose)) +
geom_violin() +
scale_fill_manual(values=red) +
guides(fill=FALSE)
p
install.packages('rsconnect')
library(rsconnect)
if(!require("devtools"))
install.packages("devtools")
rsconnect::setAccountInfo(name='oscarortega',
token='EAAD1B5734EB41A225275024442452DC',
secret='<SECRET>')
rsconnect::setAccountInfo(name='oscarortega',
token='EAAD1B5734EB41A225275024442452DC',
secret='TS50ZcNuhTEIlr9HDZFK6DmXvtaZYEPdLxxd/sd3')
library(shiny)
runApp()
runApp('Kobayashi')
runApp('Kobayashi')
runApp('Kobayashi')
dataset <- diamonds
fluidPage(
titlePanel("Diamonds Explorer"),
sidebarPanel(
sliderInput('sampleSize', 'Sample Size', min=1, max=nrow(dataset),
value=min(1000, nrow(dataset)), step=500, round=0),
selectInput('x', 'X', names(dataset)),
selectInput('y', 'Y', names(dataset), names(dataset)[[2]]),
selectInput('color', 'Color', c('None', names(dataset))),
checkboxInput('jitter', 'Jitter'),
checkboxInput('smooth', 'Smooth'),
selectInput('facet_row', 'Facet Row', c(None='.', names(dataset))),
selectInput('facet_col', 'Facet Column', c(None='.', names(dataset)))
),
mainPanel(
plotOutput('plot')
)
)
runApp('Kobayashi')
library(boot, lib.loc = "C:/Program Files/R/R-3.6.0/library")
detach("package:boot", unload = TRUE)
#########################
# Packages to load      #
#########################
library(biovizBase)
#########################
# Packages to install   #
#########################
source("http://www.bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install()
BiocManager::install(c("biovizBase"))
#########################
# Packages to load      #
#########################
library(biovizBase)
BiocManager::install("ggbio")
BiocManager::install("Homo.sapiens")
biocLite("Homo.sapiens")
BiocManager::install("Homo.sapiens")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
library(BiocInstaller)
install.packages("BiocInstaller")
update.packages()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
update.packages()
BiocManager::install()
BiocManager::install("Homo.sapiens")
library(GenomicFeatures)
library(Homo.sapiens)
BiocManager::install("Homo.sapiens")
BiocManager::install("BiocParallel")
BiocManager::install("Homo.sapiens")
BiocManager::install("Mus.muculus")
BiocManager::install("Mus.musculus")
library(GenomicFeatures)
library(GenomicFeatures)
update.packages()
BiocManager::install()
installed.packages()[, c("Package", "LibPath")]
update.packages()
installed.packages()[, c("Package", "LibPath")]
BiocManager::install()
update.packages()
update.packages()
BiocManager::install()
BiocManager::install("Mus.musculus")
BiocManager::install("BiocParallel")
library(BiocParallel)
BiocManager::install("Homo.sapiens")
#########################
# Packages to load      #
#########################
library(biovizBase)
library(ggbio)
library(Homo.sapiens)
BiocManager::install("Mus.musculus")
library(Homo.sapiens)
library(Mus.sapiens)
BiocManager::install("Mus.musculus")
library(Homo.sapiens)
mm10IdeogramCyto <- getIdeogram("mm10", cytoband = TRUE)
mm10IdeogramCyto
highlight = c(start = 20900000, end = 20970000)
plotIdeogram(mm10IdeogramCyto,"chr9",xlabel = TRUE,zoom.region = highlight,
color = "red",size = 2,aspect.ratio = 1/10)
wh_1 <- unlist(selectRangesById(Mus.musculus, c('Brca1'), keytype='SYMBOL'))
wh_2 <- genesymbol[c("BRCA1", "NBR1")]
wh_2
wh_2 <- range(wh_2, ignore.strand = TRUE)
wh_2
p.txdb <- autoplot(object = Homo.sapiens, which = wh)
p.txdb <- autoplot(object = Homo.sapiens, which = wh_2)
p.txdb
list <- c(63.2,57.6,54.1,64.4,61.5)
list <- c(63.2,57.6,54.1,64.4,61.5)
sd(list)
zstar = qnorm(.995) #This calculates z* at a 99.5% confidence interval
p = 0.25 #The approximate methylation level from this example
n = 10000 #Number of cytosine calls assayed
zstar*sqrt((p*(1-p))/n) #Margin of error calculation given above variables
zstar = qnorm(.995) #This calculates z* at a 99.5% confidence interval
p = 0.25 #The approximate methylation level from this example
E = 0.005 #Margin of error
zstar^2 * p * (1-p) / E^2 #Calculates cytosine calls required to achieve given margin of error
zstar = qnorm(.995) #This calculates z* at a 99.5% confidence interval
p = 0.25 #The approximate methylation level from this example
n = seq(100,50000,by=100) #Numbers of cytosine calls assayed
E = zstar*sqrt((p*(1-p))/n) #Margin of error calculation given above variables
plot(x=CG_calls,y=E,pch=20,xlab = " CG calls", ylab = "Margin of error") #Plot X and Y axes
abline(h=0.005) # Margin of error 99.5
plot(x=n,y=E,pch=20,xlab = " CG calls", ylab = "Margin of error") #Plot X and Y axes
abline(h=0.005) # Margin of error 99.5
zstar = qnorm(.995) #This calculates z* at a 99.5% confidence interval
p = 0.25 #The approximate methylation level from this example
n = seq(100,50000,by=100) #Numbers of cytosine calls assayed
E = zstar*sqrt((p*(1-p))/n) #Margin of error calculation given above variables
plot(x=n,y=E,pch=20,xlab = " CG calls", ylab = "Margin of error") #Plot X and Y axes
abline(h=0.01) # Margin of error 99.5
zstar = qnorm(.995) #This calculates z* at a 99.5% confidence interval
p = 0.25 #The approximate methylation level from this example
n = seq(100,50000,by=100) #Numbers of cytosine calls assayed
E = zstar*sqrt((p*(1-p))/n) #Margin of error calculation given above variables
plot(x=n,y=E,pch=20,xlab = " CG calls", ylab = "Margin of error") #Plot X and Y axes
abline(h=0.01) # Margin of error 1%
zstar = qnorm(.995) #This calculates z* at a 99.5% confidence interval
p = 0.25 #The approximate methylation level from this example
n = seq(100,50000,by=100) #Numbers of cytosine calls assayed
E = zstar*sqrt((p*(1-p))/n) #Margin of error calculation given above variables
plot(x=n,y=E,pch=20,xlab = " CG calls", ylab = "Margin of error") #Plot X and Y axes
abline(h=0.01) # Margin of error 1%
BiocManager::install("multiMiR")
pwd()
getwd()
X <- 10
X
class(X)
Y = 2256
Y = 256
X + Y
X/Y
X=16
Y=256
Y/X
Y>16
Z = ATGCCCTGA
Z = "ATGCCCTGA"
Z
Z/3
Z[1:3]
substr(X,1,3)
substr(Z,1,3)
len(Z)
length(Z)
codon_3 <- (7,9)
codon_3 <- substr(Z,7,9)
codon_3
codon_1 <- substr(Z,1,3)
codon_2 <- substr(Z,4,6)
X < 16
Y > 32
codones <- c(codon_1, codon_2, codon_3)
codones
class(codones)
length(codones)
codones[1]
codones[2]
results <- read.csv("miRNA_GEO_pita_results.tab",sep = "\t")
setwd("C:/Users/OscarJavier/Desktop/miRNA/04_results_pita_raw")
# Change working directory
setwd("C:/Users/OscarJavier/Desktop/miRNA/04_results_pita_raw")
results <- read.csv("miRNA_GTEX_results_pita_results.tab",sep = "\t")
results <- results[!duplicated(results[c("UTR","microRNA","Start",
"End","Seed","Loop","ddG")]),]
UTR_names <- strsplit(results$UTR,"_")
results["gene_ID"] <- paste(unlist(lapply(UTR_names, `[[`, 1)),
unlist(lapply(UTR_names, `[[`, 2)),
unlist(lapply(UTR_names, `[[`, 3)),
unlist(lapply(UTR_names, `[[`, 4)),
sep = "_")
gene_names <- unique(results$gene_ID)
for (k in seq(1, length(gene_names))){
gene_name_temp <- gene_names[k]
table_gene <- results[results$gene_ID==gene_name_temp,]
variant_names_all <- unique(table_gene$UTR)
variant_names <- variant_names_all[variant_names_all!=gene_name_temp]
table_WT <- table_gene[table_gene$UTR==gene_name_temp,]
for (j in seq(1, length(variant_names))){
mut_name_temp = variant_names[j]
table_mut <- table_gene[table_gene$UTR==mut_name_temp,]
table_WT["miRNA_info_coor"] <- paste(table_WT$microRNA,table_WT$Start,table_WT$End,sep = "_")
table_WT["miRNA_info_all"] <- paste(table_WT$microRNA,table_WT$Start,table_WT$End,
table_WT$Seed,table_WT$Loop,table_WT$ddG,sep = "_")
table_mut["miRNA_info_coor"] <- paste(table_mut$microRNA,table_mut$Start,table_mut$End,sep = "_")
table_mut["miRNA_info_all"] <- paste(table_mut$microRNA,table_mut$Start,table_mut$End,
table_mut$Seed,table_mut$Loop,table_mut$ddG,sep = "_")
missing_temp <- table_WT[!table_WT$miRNA_info_coor %in% table_mut$miRNA_info_coor,]
new_temp <- table_mut[!table_mut$miRNA_info_coor %in% table_WT$miRNA_info_coor,]
common_coor_temp <- table_WT[table_WT$miRNA_info_coor %in% table_mut$miRNA_info_coor,]
column_names = c("UTR","microRNA","Start","End","Seed","Loop","dGduplex","dG5",
"dG3","dG0","dG1","dGopen","ddG","gene_ID","miRNA_info_coor",
"miRNA_info_all")
diff_temp <- data.frame(matrix(ncol=16,nrow=0, dimnames=list(NULL, column_names)))
for (i in common_coor_temp$miRNA_info_coor){
table_WT_temp <- table_WT[table_WT$miRNA_info_coor==i,]
table_mut_temp <- table_mut[table_mut$miRNA_info_coor==i,]
if (table_WT_temp$miRNA_info_all != table_mut_temp$miRNA_info_all){
diff_temp <- rbind(diff_temp,table_WT_temp)
diff_temp <- rbind(diff_temp,table_mut_temp)
}
}
missing_filename <- paste0(mut_name_temp,"_missing.tab")
new_filename <- paste0(mut_name_temp,"_new.tab")
diff_filename <- paste0(mut_name_temp,"_diff.tab")
write.csv(missing_temp,missing_filename,row.names = FALSE)
write.csv(new_temp,new_filename,row.names = FALSE)
write.csv(diff_temp,diff_filename,row.names = FALSE)
}
}
k = 1
gene_name_temp <- gene_names[k]
table_gene <- results[results$gene_ID==gene_name_temp,]
variant_names_all <- unique(table_gene$UTR)
variant_names <- variant_names_all[variant_names_all!=gene_name_temp]
table_WT <- table_gene[table_gene$UTR==gene_name_temp,]
#  for (j in seq(1, length(variant_names))){
j = 1
mut_name_temp = variant_names[j]
mut_name_temp
table_mut <- table_gene[table_gene$UTR==mut_name_temp,]
table_WT["miRNA_info_coor"] <- paste(table_WT$microRNA,table_WT$Start,table_WT$End,sep = "_")
table_WT["miRNA_info_all"] <- paste(table_WT$microRNA,table_WT$Start,table_WT$End,
table_WT$Seed,table_WT$Loop,table_WT$ddG,sep = "_")
table_mut["miRNA_info_coor"] <- paste(table_mut$microRNA,table_mut$Start,table_mut$End,sep = "_")
table_mut["miRNA_info_all"] <- paste(table_mut$microRNA,table_mut$Start,table_mut$End,
table_mut$Seed,table_mut$Loop,table_mut$ddG,sep = "_")
missing_temp <- table_WT[!table_WT$miRNA_info_coor %in% table_mut$miRNA_info_coor,]
missing_temp
new_temp <- table_mut[!table_mut$miRNA_info_coor %in% table_WT$miRNA_info_coor,]
new_temp
common_coor_temp <- table_WT[table_WT$miRNA_info_coor %in% table_mut$miRNA_info_coor,]
common_coor_temp$miRNA_info_coor
column_names = c(  "UTR","microRNA","Start","End","Seed","Loop","dGduplex","dG5",
"dG3","dG0","dG1","dGopen","ddG","gene_ID","miRNA_info_coor",
"miRNA_info_all")
diff_temp <- data.frame(matrix(ncol=16,nrow=0, dimnames=list(NULL, column_names)))
a=0
for (i in common_coor_temp$miRNA_info_coor){
a=a+1
table_WT_temp <- table_WT[table_WT$miRNA_info_coor==i,]
table_mut_temp <- table_mut[table_mut$miRNA_info_coor==i,]
if (table_WT_temp$miRNA_info_all != table_mut_temp$miRNA_info_all){
diff_temp <- rbind(diff_temp,table_WT_temp)
diff_temp <- rbind(diff_temp,table_mut_temp)
print(a)
}
}
i = common_coor_temp$miRNA_info_coor[36]
table_WT_temp <- table_WT[table_WT$miRNA_info_coor==i,]
table_WT_temp
table_mut_temp <- table_mut[table_mut$miRNA_info_coor==i,]
table_mut_temp
unlist(strsplit(table_mut_temp$UTR,"_"))[5]
str_replace((unlist(strsplit(table_mut_temp$UTR,"_"))[5]), "([A-Z])", "")
str_replace((unlist(strsplit(table_mut_temp$UTR,"_"))[5]), "A", "")
gsub("[A-Z]","",(unlist(strsplit(table_mut_temp$UTR,"_"))[5]))
position_temp <- gsub("[A-Z]","",(unlist(strsplit(table_mut_temp$UTR,"_"))[5]))
position_temp %in% seq(min(table_mut_temp$Start,table_mut_temp$End),max(table_mut_temp$Start,table_mut_temp$End))
position_temp
position_temp <- as.numeric(gsub("[A-Z]","",(unlist(strsplit(table_mut_temp$UTR,"_"))[5])))
position_temp
position_temp %in% seq(min(table_mut_temp$Start,table_mut_temp$End),max(table_mut_temp$Start,table_mut_temp$End))
seq(min(table_mut_temp$Start,table_mut_temp$End),max(table_mut_temp$Start,table_mut_temp$End))
position_temp = 120
position_temp %in% seq(min(table_mut_temp$Start,table_mut_temp$End),max(table_mut_temp$Start,table_mut_temp$End))
results <- read.csv("miRNA_GTEX_results_pita_results.tab",sep = "\t")
# Remove duplicates
results <- results[!duplicated(results[c("UTR","microRNA","Start",
"End","Seed","Loop","ddG")]),]
UTR_names <- strsplit(results$UTR,"_")
# Remove duplicates
results <- results[!duplicated(results[c("UTR","microRNA","Start",
"End","Seed","Loop","ddG")]),]
UTR_names <- strsplit(results$UTR,"_")
results["gene_ID"] <- paste(unlist(lapply(UTR_names, `[[`, 1)),
unlist(lapply(UTR_names, `[[`, 2)),
unlist(lapply(UTR_names, `[[`, 3)),
unlist(lapply(UTR_names, `[[`, 4)),
sep = "_")
gene_names <- unique(results$gene_ID)
for (k in seq(1, length(gene_names))){
gene_name_temp <- gene_names[k]
table_gene <- results[results$gene_ID==gene_name_temp,]
variant_names_all <- unique(table_gene$UTR)
variant_names <- variant_names_all[variant_names_all!=gene_name_temp]
table_WT <- table_gene[table_gene$UTR==gene_name_temp,]
for (j in seq(1, length(variant_names))){
mut_name_temp = variant_names[j]
table_mut <- table_gene[table_gene$UTR==mut_name_temp,]
table_WT["miRNA_info_coor"] <- paste(table_WT$microRNA,table_WT$Start,table_WT$End,sep = "_")
table_WT["miRNA_info_all"] <- paste(table_WT$microRNA,table_WT$Start,table_WT$End,
table_WT$Seed,table_WT$Loop,table_WT$ddG,sep = "_")
table_mut["miRNA_info_coor"] <- paste(table_mut$microRNA,table_mut$Start,table_mut$End,sep = "_")
table_mut["miRNA_info_all"] <- paste(table_mut$microRNA,table_mut$Start,table_mut$End,
table_mut$Seed,table_mut$Loop,table_mut$ddG,sep = "_")
missing_temp <- table_WT[!table_WT$miRNA_info_coor %in% table_mut$miRNA_info_coor,]
new_temp <- table_mut[!table_mut$miRNA_info_coor %in% table_WT$miRNA_info_coor,]
common_coor_temp <- table_WT[table_WT$miRNA_info_coor %in% table_mut$miRNA_info_coor,]
column_names = c("UTR","microRNA","Start","End","Seed","Loop","dGduplex","dG5",
"dG3","dG0","dG1","dGopen","ddG","gene_ID","miRNA_info_coor",
"miRNA_info_all")
diff_temp <- data.frame(matrix(ncol=16,nrow=0, dimnames=list(NULL, column_names)))
diff_temp_B <- data.frame(matrix(ncol=16,nrow=0, dimnames=list(NULL, column_names)))
for (i in common_coor_temp$miRNA_info_coor){
table_WT_temp <- table_WT[table_WT$miRNA_info_coor==i,]
table_mut_temp <- table_mut[table_mut$miRNA_info_coor==i,]
if (table_WT_temp$miRNA_info_all != table_mut_temp$miRNA_info_all){
position_temp <- as.numeric(gsub("[A-Z]","",(unlist(strsplit(table_mut_temp$UTR,"_"))[5])))
if (position_temp %in% seq(min(table_mut_temp$Start,table_mut_temp$End),max(table_mut_temp$Start,table_mut_temp$End))){
diff_temp <- rbind(diff_temp,table_WT_temp)
diff_temp <- rbind(diff_temp,table_mut_temp)
}else{
diff_temp_B <- rbind(diff_temp_B,table_WT_temp)
diff_temp_B <- rbind(diff_temp_B,table_mut_temp)
}
}
}
missing_filename <- paste0(mut_name_temp,"_missing.tab")
new_filename <- paste0(mut_name_temp,"_new.tab")
diff_filename <- paste0(mut_name_temp,"_diff.tab")
diff_filename_B <- paste0(mut_name_temp,"_diff_B.tab")
write.csv(missing_temp,missing_filename,row.names = FALSE)
write.csv(new_temp,new_filename,row.names = FALSE)
write.csv(diff_temp,diff_filename,row.names = FALSE)
write.csv(diff_temp_B,diff_filename_B,row.names = FALSE)
}
}
warnings()
library(edgeR)
setwd("~/GitHub/Paternal_hypoxia_Ragsdale_2020/Data")
## 1. Read the output from featurecounts.
counts=read.csv("Zf_hypoxia_raw_counts.txt", sep="", head=T, skip=1, row.names = "Geneid")
colnames(counts)[6:dim(counts)[2]]
#assign names to samples
colnames(counts)[6:dim(counts)[2]]=  c("C1","C2","C3","H1","H2","H3")
samples=cbind(colnames(counts)[6:dim(counts)[2]],rep(c("control","hypoxia"),each=3))
rownames(samples)=samples[,1]
samples=as.data.frame(samples[,-1])
colnames(samples)="treatment"
samples
# esimtate new counts and variance
dds=DESeqDataSetFromMatrix(countData = counts[,6:dim(counts)[2]],colData = samples,design = ~ treatment)
keep <- rowSums(cpm(counts(dds)))     >= 6 # cpm average 1 per sample
# esimtate new counts and variance
dds=DESeqDataSetFromMatrix(countData = counts[,6:dim(counts)[2]],colData = samples,design = ~ treatment)
library(DESeq2)
## 1. Read the output from featurecounts.
counts=read.csv("Zf_hypoxia_raw_counts.txt", sep="", head=T, skip=1, row.names = "Geneid")
colnames(counts)[6:dim(counts)[2]]
#assign names to samples
colnames(counts)[6:dim(counts)[2]]=  c("C1","C2","C3","H1","H2","H3")
samples=cbind(colnames(counts)[6:dim(counts)[2]],rep(c("control","hypoxia"),each=3))
rownames(samples)=samples[,1]
samples=as.data.frame(samples[,-1])
colnames(samples)="treatment"
samples
# esimtate new counts and variance
dds=DESeqDataSetFromMatrix(countData = counts[,6:dim(counts)[2]],colData = samples,design = ~ treatment)
keep <- rowSums(cpm(counts(dds)))     >= 6 # cpm average 1 per sample
dds <- dds[keep,]
#Look at the PCA
plotPCA(rlog(dds,blind=T), intgroup="treatment")+theme_bw()
#Look at the PCA
plotPCA(rlog(dds,blind=T), intgroup="treatment")
plotDispEsts( dds, ylim = c(1e-6, 1e1) )
dds <- DESeq(dds)
plotDispEsts(dds, ylim = c(1e-6, 1e1) )
res <- results(dds, cooksCutoff=TRUE, independentFiltering=F,contrast=c("treatment","hypoxia","control"))
DE_genes<-res[which(res$padj<=0.05),]
# remove the one where there are some individuals  outliers
dim(DE_genes)
# remove the one where there are some individuals  outliers
write.csv(DE_genes,"erase.csv")
all_genes <- read.csv("Coupling_all_genes.csv")
View(all_genes)
all_genes$ID
all_genes$ID %in% DE_genes$
DE_genes
#all_genes$ID %in% DE_genes$
DE_genes
#all_genes$ID %in% DE_genes$
rownames(DE_genes)
all_genes$ID %in% rownames(DE_genes)
specific <- all_genes[all_genes$ID %in% rownames(DE_genes),]
write.csv(specific,"DEG_coupling.csv")
write.csv2(specific,"DEG_coupling.csv")
# Specific coupling
data = read.csv("DEG_coupling.csv",sep="\t")
# Specific coupling
data = read.csv("DEG_coupling.csv",sep="\t")
data_clean = data[data$Control_calls>20&data$Hypoxia_calls>20,]
data_clean$expression = ifelse(data_clean$log2FoldChange>0,"Up","Down")
table(data_clean$expression)
str(data)
View(data)
# Specific coupling
data = read.csv("DEG_coupling.csv",sep=";")
str(data)
data_clean = data[data$Control_calls>20&data$Hypoxia_calls>20,]
data_clean$expression = ifelse(data_clean$log2FoldChange>0,"Up","Down")
data_clean = data[data$Control_calls>20&data$Hypoxia_calls>20,]
# Specific coupling
data = read.csv("Coupling_specific.txt",sep="\t")
data = read.csv("DEG_coupling.csv",sep="\t")
# Specific coupling
data = read.csv("Coupling_specific.txt",sep="\t")
data = read.csv("DEG_coupling.csv",sep=";")
# Specific coupling
data = read.csv("Coupling_specific.txt",sep="\t")
data = read.csv("DEG_coupling.csv",sep=";")
# Specific coupling
data = read.csv("Coupling_specific.txt",sep="\t")
data_1 = read.csv("DEG_coupling.csv",sep=";")
View(data)
View(data_1)
data_clean = data[data$Control_calls>20&data$Hypoxia_calls>20,]
data_clean$expression = ifelse(data_clean$log2FoldChange>0,"Up","Down")
table(data_clean$expression)
data_clean$expression <- factor(data_clean$expression)
colfunc_data <- colorRampPalette(c("#45b6fe", "#ed2939"))
col_data <- colfunc_data(2)[1:2]
plot_control <- ggplot(data_clean, aes(x=expression, y=Control_met,fill=expression)) +
geom_violin(scale = "area")+
stat_summary(fun.y=mean, geom="point", size=4, color="black") +
theme(axis.text = element_text(size=20)) +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())+
scale_fill_manual(values=col_data) +
guides(fill=FALSE)
library(ggplot2)
library(RColorBrewer)
data_1 = read.csv("DEG_coupling.csv",sep=";")
data_clean = data[data$Control_calls>20&data$Hypoxia_calls>20,]
data_clean$expression = ifelse(data_clean$log2FoldChange>0,"Up","Down")
table(data_clean$expression)
data_clean$expression <- factor(data_clean$expression)
colfunc_data <- colorRampPalette(c("#45b6fe", "#ed2939"))
col_data <- colfunc_data(2)[1:2]
plot_control <- ggplot(data_clean, aes(x=expression, y=Control_met,fill=expression)) +
geom_violin(scale = "area")+
stat_summary(fun.y=mean, geom="point", size=4, color="black") +
theme(axis.text = element_text(size=20)) +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())+
scale_fill_manual(values=col_data) +
guides(fill=FALSE)
plot_hypoxia <- ggplot(data_clean, aes(x=expression, y=Hypoxia_met,fill=expression)) +
geom_violin(scale = "area")+
stat_summary(fun.y=mean, geom="point", size=4, color="black") +
theme(axis.text = element_text(size=20)) +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank())+
scale_fill_manual(values=col_data) +
guides(fill=FALSE)
plot_control
plot_hypoxia
plot_control
plot_hypoxia
data = read.csv("DEG_coupling.csv",sep=";")
data_clean = data[data$Control_calls>20&data$Hypoxia_calls>20,]
data_clean$expression = ifelse(data_clean$log2FoldChange>0,"Up","Down")
# Specific coupling
data = read.csv("Coupling_specific.txt",sep="\t")
str(data)
str(data_1)
